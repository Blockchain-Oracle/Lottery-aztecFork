{"noir_version":"0.23.0+9a70040211d205f472aa31924649c2fef999eb49","name":"Token","functions":[{"name":"is_over_18","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"current_year","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"current_month","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"current_day","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_year","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_month","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_day","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"param_witnesses":{"birth_day":[{"start":5,"end":6}],"birth_month":[{"start":4,"end":5}],"birth_year":[{"start":3,"end":4}],"current_day":[{"start":2,"end":3}],"current_month":[{"start":1,"end":2}],"current_year":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[6]},"bytecode":"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","debug_symbols":""},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"symbol","type":{"kind":"string","length":31},"visibility":"private"},{"name":"decimals","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"lastTimeStamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"param_witnesses":{"admin":[{"start":36,"end":37}],"decimals":[{"start":99,"end":100}],"inputs":[{"start":0,"end":36}],"lastTimeStamp":[{"start":100,"end":101}],"name":[{"start":37,"end":68}],"symbol":[{"start":68,"end":99}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390]},"bytecode":"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","debug_symbols":"7Z3bTttAEIbfxdcIzWFPw6tUXKCWSkgIqsId4t3rpnjtyNuMSFPDTPaqVFrb8/22+D9IsrwM949fb57vHh+ehquXIcfh6svL8PTj5uH3f5+eb34+D1dwMdw+fBv/fb0Yvt/d3w5XIb5erJah5Py2EkWkLo7UWExc6G0xBZ4XI3Lr1BhSmM6Nkcre+uuLISerg2ergxerg8tmg0dM0+Axp38dvEBrcKIS60UoKeNzEJmuwRFDXS7h/ydf0DoAWQdg6wDBOkC0DpCsA2TrAMU6gBgHEOtNLNabWKw3sVhvYrHexGK9icV6E4v1JhbrTSzWmxjBehUjWO9iBOtljGC9jRGs1zGC9T5GsF7ICNYbGcF6JSOY72Q038lovpPRfCej+U5G852M5jsZzXcymu9kNN/JaL6TyXwnk/lOJvOdTOY7mcx3MpnvZDLfyWS+k8l8J5P5TmbznczmO5nNdzKb72Q238lsvpPZfCez+U5m853M5js5mO/ksH0nn/Z97hhO0ckxhJkgxyXB7hqnaM3IePAap+i1WFK9RlqE27wT480PPC0PjLQaKW4/Up5TCllbnqi8LU5pfuzGX/60aaGeOfJidWtuqclInG/V+LD9CSb1YNrB5B5MO5jSg2kHIz2YZjARejDtYLAH0w6GejDtYLgH0w4m9GDawfgy31KDiYB7wexgfdmsAuvLUBVYX9apwPoyycOwyZcdKrC+jE+B9WVxCqwvM1NgwznBujKoSHUjlxjKGtaVQWmwrgxKg3VlUBqsK4NSYLMrg9JgXRmUBuvKoDRYVwalwYZzgvVlULlU2MVWeBXWl0EpsL4MSoH1ZVAKrC+DOgxbfBmUAuvLoBRYXwalwPoyKAU2nBPsBxhUSfNb6gTy6WAZ0jQ2Iyx0MfC7X94sqQfTDib3YNrBlB5MOxjpwTSDEejBtIPBHkw7GOrBtIPhHkw7mNCDaQfTzfcvwbgyXwxQg0m4F8wO1pXNarCuDFWDdWWdh2EJXJmkBuvKDjVYV8anwbqyOA02nBOsK9saf0CdYGnxmeAK68ugFFhfBqXA+jIoBdaXQR2GRV8GpcD6MigF1pdBKbC+DEqBDZ5gKVaDorw2KHRlUBqsK4PSYF0ZlAbryqA0WFcGpcCSK4PSYF0ZlAbryqA0WFcGxTjthcfMa4M6ye7dZmBdGZQG68qgNFhXBqXBujIoDdaVQSmw7MqgNFhXBqXBujIoDfacDOoke62/DzYKTCcfvw57sLuR4geMVN9/hAn29zfejbS9jSSgujwhwWqk7Z0h0fyUJhJcjVQ+30jb929iqHtlJ46rGxe2b8lxxfx4F6LVSNt3WSr1Bffxa4mrkbZvnCQ4P0uyv3w3En/ASFJ3Lc8g62dp++/eGaF+IitjWd+47b9759FP6kgU+PBygencwotfn3BpP6Z1kBz2P37WWK3tZE8fsKu4oXDyZw8nTJNIBiWcyDSdOQZYrsbjwimfPJwC9SOggGkvnevd33C4bN7eMj9wiw0yokwHlWMOapY+ylQ44ytW9aAEb3+a4bL9W+LDlxqP4qOOCkcdFY86Kr3vqNfXXw=="},{"name":"enter_lottery","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"blocktimeStamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"somehash","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"param_witnesses":{"blocktimeStamp":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}],"somehash":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]},"bytecode":"","debug_symbols":""},{"name":"balance_of_public","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"owner":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":120},"visibility":"public"},"return_witnesses":[1]},"bytecode":"H4sIAAAAAAAA/81XzU7CQBDebcuPRQriyUSTfQKyJcaDesB496BPUEMxJkCTtsT68kYWZpLPteHCVpwEZjo7nfnm23baSiGEJ3bib35S/Bb2TUnrwyR2mEtLC+cT2R3wK1f1rvWkZZIEP3lhCYFLjmnTj9cl+TluAD4J2FuusWs9MfV9C7PdgwK7BXgC93jihvrUHeD8y13eG+aCxbd4OoX1NnDXaYA7CXU5N+6XqLH34fX+Ad4mr4eu+7yT/ibHCfDatfjFvkKyHV6PWlB9IwHUC6HuKdlSuJ25PehVAg6u50PMFekI1m1+eu73J94323oWXubo2HhCUf9c6QE29nnWuWbmPMJ6RLYHvgHZfk3uCHx9sgc15yJPEfQyJVsfJluesJaC4wh6lhbGY+Pp/CEe3h/O3bfwHLv2kGyX887kPWuopxHlalNuxs/1fIi5s/plvxG+l4ZwbMdhH5VwO5cRSwW1uV4I9gh85zVxPDd4rUvYeXY43NsY39mUw7ymD353Zdk3h/G9rYF3kdg8J/kaKcosT97S5zSZSYAWWDBR2587Rjzwoe3X+IyE0GYAPh5fLfB5Fi34CcHxXVHz2TglrQ+T7b3pUYGKtG8RgIJkeTVxl6TvSb/s9kAVi6xUWq02/8likX2ks7HCtUIt10WpijLJSzXPs6WKx5j3lvQF6Yc8Tz7V+2qWVipblyqbq9dsvZoV4hvZrl7Dcg8AAA==","debug_symbols":"1djNaoNQEIbhezlrKTNz5vx5K6WL0KYQCKZUd+K9N8GfpCi1kdR+7hKY4zyL5BVObY6n1111OBWlyWtDT97kz7UpP3bF5XtZ7T4rk4dgU2b2xdvlY5AmM++H497k6ppsNMxE3A0zOTsMM8nUNKvXfpydxOs82+YlO5MCHinikRIeiQnQxIAmATRZQJMCmhygCTDiDFhxBsw4A3ZcADsugB0XwI7LAzrOEocl0c2YqBulnx/qU+gBrDePDB1bt8l222T7bbLDNtlxm+xfvJnSHNvbgZ2+7xhP2yDdsPK1hE5bjiUsDmNxBItjsTiKxXFYHI/FCViciMXBqrJiVVmxqqxYVVasKitWlRWryopVZcWqsmJVWbGq7P62yu0OXmGHrLDDrrDjAaUTGm5+RPzMzyPI8GR7c0l0XtJ6HJjHg3kCmCeCeRKWxxOYh//Po37CI2AeC+aZ/L+L7+/HLOnoHevjgjPp/jOBFpzhBWfkvjNN8wU="},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"serialized_note":[{"start":3,"end":6}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[6,7,8,9]},"bytecode":"","debug_symbols":""},{"name":"buy_Tickets","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"current_year","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"current_month","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"current_day","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_year","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_month","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_day","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"param_witnesses":{"birth_day":[{"start":39,"end":40}],"birth_month":[{"start":38,"end":39}],"birth_year":[{"start":37,"end":38}],"current_day":[{"start":36,"end":37}],"current_month":[{"start":35,"end":36}],"current_year":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242]},"bytecode":"","debug_symbols":"1d3dri7XcaXpe9Gx0cj4n+FbafRBobsaKKBQ1ejymeF7rzTAtUnDS9qMKX6hl0cWhJUrw8o5h7YG4yH/9S///X/+3//lX/7b//wf/+sv//yvf3n+D+n+yz//n//6l//1//2X//Hv/87/+pf/8v//y1/++fmnv/zX//H/vP/33/7pL//vf/vv//Uv/+zxb//XP70P6PNMH5DpAzp9wKYP+PSBmD6Q0wdq+sCZPjD90jL90vL7v/Q//acfU/Hzy0+qVP744dCv364f/e320d/uH/3t8dHfnh/97fXR334++tv7k79dn4/+9o/eVf3oXdWP3lX96F3Vj95V/ehd1Y/eVf3oXdWP3lX76F21j95V++hdtY/eVfvoXbWP3lX76F21j95V++hdtY/eVf/oXfWP3lX/6F31j95V/+hd9Y/eVf/oXfWP3lX/6F31j97V+Ohdjb/nrkpX/fKTb4nSv/3t3/xwHfn64Tr644dF7GsWBc1ioFkcNEuAZknQLAWa5YBmac4s+YBmAeVugnI3QbmboNxNUO4mKHcTlLsJyt0E5W6BcrdAuVug3C1Q7hYodwuUuwXK3QLlboFyt0C5e0C5e0C5e0C5e0C5e0C5e0C5e0C5e0C5e0C5e0C526DcbVDuNih3G5S7DcrdBuVug3K3QbnboNxtTu7aw8ldezi5aw8nd+3h5K49nNy1h5O79nBy1x5O7trDyV17QLkroNwVUO4KKHcFlLsCyl0B5a6AcldAuSug3BVQ7ioodxWUuwrKXQXlroJyV0G5q6DcVVDuKih3FZS7BspdA+WugXLXQLlroNw1UO4aKHcNlLsGyl0D5a6DctdBueug3HVQ7joodx2Uuw7KXQflroNy10G5G6DcBXk1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1A3k1W7RQR7/+lnFyvL+bpTCz+J75Uf/xjd5/qd/NIqBZFDSLgWZx0Cx7f2Z4vO3rp99/Hb9OUz+mSdQ0axmjIfn1neI3f4vMf/9Os5/+ZfLzp528mZOLePrX75bQ883sewbpA7PLn3j235+nvzwQ0wf+rr/vsGv9COH49f/h1q/fXh/97X9PFph0/PKT77/87rf3J3+7Dv/RN64yfUCnD9j0genp1Onp1Jw+UNMHzvSB4T/kyG36pW36pW36pW36pW36pW36pW36pW36pW36pW36pX36pX36pX36pX36pX36pX36pX36pX36pX36pX36pWP6pWP6pWP6pWP6pWP6pWP6pWP6pWP6pWP6pWP6pXP6pXP6pXP6pXP6pXP6pXP6pXP6pXP6pXP6pXP6pWv6pWv6pWv6pWv6pWv6pWv6pWv6pWv6pWv6pWv6pc/0S5/plz7TL32mX/pMv/SZfukz/dJn+qXP9Euf6Zfu6Zfu6Zfu6Zfu6Zfu6Zfu6Zfu6Zfu6Zfu6Zee/kODY/oPDY7pPzQ4pv/Q4Jj+Q4Pj8ekDMX0gpw/U9IEzfWD6paf/0OCQ6ZeW6ZeW6Zee9nox7fVCpl9apl9apl9apl962pHFtCOLaUcW044sph1ZTDuymHZkMe3IYtqRxbQji2lHFtOOLKYdWUw7sph2ZDHtyGLakcW0I4tpRxbTjiymHVlMO7KYdmQx7chi2pHFtCOLaUcW044sph1ZTDuymHZkMe3IYtqRxbQji2lHFtOOLKYdWUw7sph2ZDHtyGLakcW0I4tpRxbTjiymHVlMO7KYdmQx7chi2pHFtCOLaUcW044sph1ZTDuymHZkMe3IYtqRxbQji2lHFtOOLKYdWUw7sph2ZDHtyGLakcW0I4tpRxbTjiymHVlMO7KYdmQx7chi2pHFtCOLaUcW044sph1ZTDuymHZkMe3IctqR5bQjy2lHltOOLKcdWU47spx2ZDntyHLakeW0I8tpR5bTjiynHVlOO7KcdmQ57chy2pHltCPLaUeW044spx1ZTjuynHZkOe3IctqR5bQjy2lHltOOLKcdWU47spx2ZDntyHLakeW0I8tpR5bTjiynHVlOO7KcdmQ57chy2pHltCPLaUeW044spx1ZTjuynHZkOe3IctqR5bQjy2lHltOOLKcdWU47spx2ZDntyHLakeW0I8tpR5bTjiynHVlOO7KcdmQ57chy2pHltCPLaUeW044spx1ZTjuynHZkOe3IctqR5bQjy2lHltOOLKcdWU47spx2ZDntyHLakeW0I8tpR5bTjiynHVlOO7KcdmQ57chy2pHltCPLaUeW044spx1ZTjuynHZkOe3IctqR5bQjy2lHltOOrKYdWU07spp2ZDXtyGrakdW0I6tpR1bTjqymHVlNO7KadmQ17chq2pHVtCOraUdW046sph1ZTTuymnZkNe3IatqR1bQjq2lHVtOOrKYdWU07spp2ZDXtyGrakdW0I6tpR1bTjqymHVlNO7KadmQ17chq2pHVtCOraUdW046sph1ZTTuymnZkNe3IatqR1bQjq2lHVtOOrKYdWU07spp2ZDXtyGrakdW0I6tpR1bTjqymHVlNO7KadmQ17chq2pHVtCOraUdW046sph1ZTTuymnZkNe3IatqR1bQjq2lHVtOOrKYdWU07spp2ZDXtyGrakdW0I6tpR1bTjqymHVlNO7KadmQ17chq2pHVtCOraUdW046sph1ZTTuymnZkNe3IatqR1bQjq2lHVtOOrKYdWU07spp2ZDXtyM60IzvTjuxMO7Iz7cjOtCM7047sTDuyM+3IzrQjO9OO7Ew7sjPtyM60IzvTjuxMO7Iz7cjOtCM7047sTDuyM+3IzrQjO9OO7Ew7sjPtyM60IzvTjuxMO7Iz7cjOtCM7047sTDuyM+3IzrQjO9OO7Ew7sjPtyM60IzvTjuxMO7Iz7cjOtCM7047sTDuyM+3IzrQjO9OO7Ew7sjPtyM60IzvTjuxMO7Iz7cjOtCM7047sTDuyM+3IzrQjO9OO7Ew7sjPtyM60IzvTjuxMO7Iz7cjOtCM7047sTDuyM+3IzrQjO9OO7Ew7sjPtyM60IzvTjuxMO7Iz7cjOtCM7047sTDuyM+3IzrQjO9OO7Ew7sjPtyM60IzvTjuxMO7Iz7cjOtCM7047sTDuyM+3IzrQjO9OO7Ew7sjPtyM60IzvTjuxMO7Iz7ch62pH1tCPraUfW046spx1ZTzuynnZkPe3IetqR9bQj62lH1tOOrKcdWU87sp52ZD3tyHrakfW0I+tpR9bTjqynHVlPO7KedmQ97ch62pH1tCPraUfW046spx1ZTzuynnZkPe3IetqR9bQj62lH1tOOrKcdWU87sp52ZD3tyHrakfW0I+tpR9bTjqynHVlPO7KedmQ97ch62pH1tCPraUfW046spx1ZTzuynnZkPe3IetqR9bQj62lH1tOOrKcdWU87sp52ZD3tyHrakfW0I+tpR9bTjqynHVlPO7KedmQ97ch62pH1tCPraUfW046spx1ZTzuynnZkPe3IetqR9bQj62lH1tOOrKcdWU87sp52ZD3tyHrakfW0I+tpR9bTjqynHVlPO7KedmQ97ch62pH1tCPraUfW045MnmlJ9j4h4yd0/ISNn/DxEzF+IsdP1PiJM35i/M1l/M1l/M1l/M1l/M1l/M1l/M1l/M1l/M1l/M1l/M11/M11/M11/M11/M11/M11/M11/M11/M11/M11/M1t/M1t/M1t/M1t/M1t/M1t/M1t/M1t/M1t/M1t/M19/M19/M19/M19/M19/M19/M19/M19/M19/M19/M1j/M1j/M1j/M1j/M1j/M1j/M1j/M1j/M1j/M1j/M1z/M1z/M1z/M1z/M1z/M1z/M1z/M1z/M1z/M1z/M1r/M1r/M1r/M1r/M1r/M1r/M1r/M1r/M1r/M1r/M3P+Juf8Tc/429+xt/8jL/5GX/zM/7mZ/zNz/ibn/E37/E37/E37/E37/E37/E37/E37/E37/E37/E3H/dwMu7hZNzDybiHk3EP9/7xdfxEjJ/I8RM1fuKMnxh/83EPJ+MeTsY9nIx7OBn3cDLu4WTcw8m4h5NxDyfjHk7GPZyMezgZ93Ay7uFk3MPJuIeTcQ8n4x5Oxj2cjHs4GfdwMu7hZNzDybiHk3EPJ+MeTsY9nIx7OBn3cDLu4WTcw8m4h5NxDyfjHk7GPZyMezgZ93Ay7uFk3MPJuIeTcQ8n4x5Oxj2cjHs4GfdwMu7hZNzDybiHk3EPJ+MeTsY9nIx7OBn3cDLu4WTcw8m4h5NxDyfjHk7GPZyMezgZ93Ay7uFk3MPJuIeTcQ8n4x5Oxj2cjHs4GfdwMu7hZNzDybiHk3EPJ+MeTsY9nIx7OBn3cDLu4WTcw8m4h5NxDyfjHk7GPZyMezgZ93Ay7uFk3MPJuIeTcQ8n4x5Oxz2cjns4HfdwOu7hdNzD6biH03EPp+MeTsc9nI57OB33cDru4XTcw+m4h9NxD6fjHk7HPZyOezgd93A67uF03MPpuIfTcQ+n4x5Oxz2cjns4HfdwOu7hdNzD6biH03EPp+MeTsc9nI57OB33cDru4XTcw+m4h9NxD6fjHk7HPZyOezgd93A67uF03MPpuIfTcQ+n4x5Oxz2cjns4HfdwOu7hdNzD6biH03EPp+MeTsc9nI57OB33cDru4XTcw+m4h9NxD6fjHk7HPZyOezgd93A67uF03MPpuIfTcQ+n4x5Oxz2cjns4HfdwOu7hdNzD6biH03EPp+MeTsc9nI57OB33cDru4XTcw+m4h9NxD6fjHk7HPZyOezgd93A67uF03MPpuIfTcQ+n4x5Oxz2cjns4HfdwOu7hbNzD2biHs3EPZ+MezsY9nI17OBv3cDbu4Wzcw9m4h7NxD2fjHs7GPZyNezgb93A27uFs3MPZuIezcQ9n4x7Oxj2cjXs4G/dwNu7hbNzD2biHs3EPZ+MezsY9nI17OBv3cDbu4Wzcw9m4h7NxD2fjHs7GPZyNezgb93A27uFs3MPZuIezcQ9n4x7Oxj2cjXs4G/dwNu7hbNzD2biHs3EPZ+MezsY9nI17OBv3cDbu4Wzcw9m4h7NxD2fjHs7GPZyNezgb93A27uFs3MPZuIezcQ9n4x7Oxj2cjXs4G/dwNu7hbNzD2biHs3EPZ+MezsY9nI17OBv3cDbu4Wzcw9m4h7NxD2fjHs7GPZyNezgb93A27uFs3MPZuIezcQ9n4x7Oxj2cjXs4G/dwNu7hbNzD2biHs3EPZ+Mezsc9nI97OB/3cD7u4Xzcw/m4h/NxD+fjHs7HPZyPezgf93A+7uF83MP5uIfzcQ/n4x7Oxz2cj3s4H/dwPu7hfNzD+biH83EP5+Mezsc9nI97OB/3cD7u4Xzcw/m4h/NxD+fjHs7HPZyPezgf93A+7uF83MP5uIfzcQ/n4x7Oxz2cj3s4H/dwPu7hfNzD+biH83EP5+Mezsc9nI97OB/3cD7u4Xzcw/m4h/NxD+fjHs7HPZyPezgf93A+7uF83MP5uIfzcQ/n4x7Oxz2cj3s4H/dwPu7hfNzD+biH83EP5+Mezsc9nI97OB/3cD7u4Xzcw/m4h/NxD+fjHs7HPZyPezgf93A+7uF83MP5uIfzcQ/n4x7Oxz2cj3s4H/dwPu7hfNzD+biH83EP5+Mezsc9nI97OB/3cD7u4WLcw8W4h4txDxfjHi7GPVyMe7gY93Ax7uFi3MPFuIeLcQ8X4x4uxj1cjHu4GPdwMe7hYtzDxbiHi3EPF+MeLsY9XIx7uBj3cDHu4WLcw8W4h4txDxfjHi7GPVyMe7gY93Ax7uFi3MPFuIeLcQ8X4x4uxj1cjHu4GPdwMe7hYtzDxbiHi0EP90//6cek6pcf1OfXHzX58cvtk7/cP/nL45O/PP+OX/7+6eiXH3zT8MePnv7uR/18/Wjqb3/0a46CzHEgczRjjkEXO5jj65fLJ3+5fvKX2yd/+d+TJn/1g86zIQIyR0LmKMgcBzJHM+bIBzKHQOZQyBwGmQOSpwnJ04TkaULyNCF5mpA8LUieFiRPC5KnBcnTguRpQfK0IHlakDwtSJ4WJE8PJE8PJE8PJE8PJE8PJE8PJE8PJE8PJE8PJE8PJE8bkqcNydOG5GlD8rQhedqQPG1InjYkTxuSp83I03wYeZoPI0/zYeRpPow8zYeRp/kw8jQfRp7mw8jTfBh5mg8kTwWSpwLJU4HkqUDyVCB5KpA8FUieCiRPBZKnAslTheSpQvJUIXmqkDxVSJ4qJE8VkqcKyVOF5KlC8tQgeWqQPDVInhokTw2SpwbJU4PkqUHy1CB5apA8dUieOiRPHZKnDslTh+SpQ/LUIXnqkDx1SJ46JE8DkqcBydOA5GlA8hTioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLiowriowriowriowrio+ph5GlBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfNSB+KgD8VEH4qMOxEedh5GnB+KjDsRHHYiPOhAfdSA+6kB81IH4qAPxUQfiow7ERx2IjzoQH3UgPupAfNSB+KgD8VEH4qMOxEcdiI86EB91ID7qQHzUgfioA/FRB+KjDsRHHYiPOhAfdSA+6kB81IH4qAPxUQfiow7ERx2IjzoQH3UgPupAfNSB+KgD8VEH4qMOxEcdiI86EB91ID7qQHzUgfioA/FRB+KjDsRHHYiPOhAfdSA+6kB81IH4qAPxUQfiow7ERx2IjzoQH3UgPupAfNSB+KgD8VEH4qMOxEcdiI86EB91ID7qQHzUgfioA/FRB+KjDsRHHYiPOhAfdSA+6kB81IH4qAPxUQfiow7ERx2IjzoQH3UgPupAfNSB+KgD8VEH4qMOxEcdiI86EB91ID7qQHzUgfiohviohviohviohviofhh52hAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1RAf1Qwf9f57iDx9/z1Enr7/HiJP338Pkafvv4fI0/ffQ+Tp++8h8vT99xB5+v57iDx9/z1InjJ81DsHJE8ZPuqdA5KnDB/1zgHJU4aPeueA5CnDR71zQPKU4aPeOSB5yvBR7xyQPGX4qHcOSJ4yfNQ7ByRPGT7qnQOSpwwf9c4ByVOGj3rngOQpw0e9c0DylOGj3jkgecrwUe8ckDxl+Kh3DkieMnzUOwckTxk+6p0DkqcMH/XOAclTho9654DkKcNHvXNA8pTho945IHnK8FHvHJA8Zfiodw5InjJ81DsHJE8ZPuqdA5KnDB/1zgHJU4aPeueA5CnDR71zQPKU4aPeOSB5yvBR7xyQPGX4qHcOSJ4yfNQ7ByRPGT7qnQOSpwwf9c4ByVOGj3rngOQpw0e9c0DylOGj3jkgecrwUe8ckDxl+Kh3DkieMnzUOwckTxk+6p0DkqcMH/XOAclTho9654DkKcNHvXMw8lQgPkogPkogPkogPkoeRp4KxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcJxEcpxEcpxEcpxEcpxEfpw8hThfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgohfgog/gog/gog/gog/goexh5ahAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAfZRAf5RAf5RAf5RAf5RAf5Q8jTx3ioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzioxzi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FlpSCy2phZbUQktqpSW10pJaaUmttKRWWlIrLamVltRKS2qlJbXSktpoSW20pDZaUhstqY2W1EZLaqMltdGS2mhJbbSkdlpSOy2pnZbUTktqpyW105LaaUnttKR2WlI7LamDltRBS+qgJXXQkjpoSR20pA5aUgctqYOW1EFL6qQlddKSOmlJnbSkTlpSJy2pk5bUSUvqpCV10pK6aEldtKQuWlIXLamLltRFS+qiJXXRkrpoSV20pD60pD60pD60pD60pD60pD60pD60pD60pD60pD60pG5aUjctqZuW1E1L6qYlddOSumlJ3bSkblpSNyyp7YEltdGMotGMotGMoj2wpDaaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUTSaUXSaUXSaUXSaUXSaUfQHltROM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pOM4pBM4pBM4pBM4pBM4rxwJI6aEYxaEYxaEYxaEYxaEYxaEYxaEYxaEYxaEYxaEYxaEYxaEYxaEYx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qZ2W1E5LaqcltdOS2mlJ7bSkdlpSOy2pnZbUQUvqoCV10JI6aEkdtKQOWlIHLamDltRBS+qgJXXSkjppSZ20pE5aUictqZOW1ElL6qQlddKSOmlJXbSkLlpSFy2pi5bURUvqoiU1zSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSgazSg6zSg6zSg6zSg6zSj6A0tqpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxlFpxnFoBnFoBnFoBnFoBnFeGBJHTSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjGDSjmDSjmDSjmDSjmDSjmA8sqZNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFJNmFItmFItmFItmFItmFOuBJXXRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGLRjGJ92Ch+vaU33vJhTfj1Fll5yx+Qfvr411tU8ycHpX785vevXfz6s9U/JjLcRI6bKHATJW6iwk10cBP1P24iz+8m+iP83x88keAm+nlm5/nbE70DxS8/rE/Gt2+xlbf4ylti5S258pZaecv5A95y9Mdbur59Sy+85fwOqfZHvEVW3qIrb5ne/a/n/sptrh/PpdZPsvJ55Csrn7DfZKV++ydczx/RKqG/+W+593+GfE0VyKkSOVUhpzrIqZo41V/TXv/gqQQ5lSKnMuRUyGwXZLYLMtsFme2CzHZBZrsis13/gGwXPT9ec+InUz2//Ojzt39pdn39D2n5rvw8qn/Wwe3POrj/WQf/+X/P+M9aoLD8Gjwi/u1vt0DuX/fuvYHf/W80zT9govzqASSf+Pb/71p5y1l5S2+8xZ6Vt8jKW3TlLbbyFl95S6y8ZeXu28rdt5W7byt331fuvq/cfV+5+75y933l7vvK3feVu+8rd99X7r6v3P1Yufuxcvdj5e7Hyt2PlbsfK3c/Vu5+rNz9WLn7sXL3c+Xu58rdz5W7nyt3P1fufq7c/Vy5+7ly93Pl7ufK3a+Vu18rd79W7n6t3P1aufu1cvdr5e7Xyt2vlbtfK3f/rNz9s3L3z8rdPyt3/6zc/bNy98/K3T8rd/+s3P2zcvd75e73yt3vlbvfK3e/V+5+r9z9Xrn7vXL3e+Xu98bd7+dZeYusvEVX3mIrb/GVt8TKW3LlLbXylrPylpW7Lyt3X1buvqzcfVm5+7Jy92Xl7svK3ZeVuy8rd19W7r6u3H1dufu6cvd15e7ryt3Xlbu/stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXK3t9vbLX1yt7fb2y19cre329stfXG3t98Wzs9b1vkZW36MpbbOUtvvKWWHlLrrylVt5yVt6ycvdl5e7Lyt2XlbsvK3dfVu6+rNx9Wbn7snL3ZeXuy8rd15W7ryt3X1fuvq7cfV25+7py93Xl7uvK3deVu68rd99W7r6t3H1bufu2cvdt5e7byt23lbtvK3ffVu6+rdx9X7n7vnL3feXu+8rd95W77yt331fuvq/cfV+5+75y92Pl7sfK3Y+Vux8rdz9W7n6s3P1Yufuxcvdj5e7Hyt3PlbufK3c/V+5+rtz9XLn7uXL3c+Xu58rdz5W7nyt3v1bufq3c/Vq5+7Vy92vl7tfK3a+Vu18rd79W7n6t3P2zcvfPyt0/K3f/rNz9s3L3z8rdPyt3/6zc/bNy98/K3e+Vu98rd79X7n6v3P1eufu9cvd75e73yt3vlbu/stcnK3t9srLXJyt7fbKy1yePr7wlVt6SK2+plbeclbes3P2VvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ65OVvT5Z2euTlb0+Wdnrk5W9PlnZ69OVvT5d2evTlb0+Xdnr08dX3hIrb8mVt9TKW87KW1bu/spen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz16cpen67s9enKXp+u7PXpyl6fruz12cpen63s9dnKXp+t7PXZ4ytviZW35MpbauUtZ+UtK3d/Za/PVvb6bGWvz1b2+mxlr89W9vpsZa/PVvb6bGWvz1b2+mxlr89W9vpsZa/PVvb6bGWvz1b2+mxlr89W9vpsZa/PVvb6bGWvz1b2+mxlr89W9vpsZa/PVvb6bGWvz1b2+mxlr89W9vpsZa/PVvb6bGWvz1b2+mxlr89W9vpsZa/PVvb67K/s9WXkj7f087O32NcPS8R/fMt//ml3/+WHPf3Xn63+MVH/ARP99P/vv7ID+Ee/RVbeoitvsZW3+MpbYuUtufKWWnnLWXnLyt3PlbufK3c/V+5+rtz9XLn7uXL3c+Xu58rdz5W7nyt3v1bufq3c/Vq5+7Vy92vl7tfK3a+Vu18rd79W7n6t3P2zcvfPyt0/K3f/rNz9s3L3z8rdPyt3/6zc/bNy98/K3e+Vu98rd79X7n6v3P1eufu9cvd75e73yt3vlbvfG3ffn2flLbLyFl15i628xVfeEitvyZW31MpbzspbVu6+rNx9Wbn7snL3ZeXuy8rdl5W7Lyt3X1buvqzcfVm5+7py93Xl7uvK3deVu68rd19X7r6u3H1dufu6cvd15e7byt23lbtvK3ffVu6+rdx9W7n7tnL3beXu28rdt5W77yt331fuvq/cfV+5+75y933l7vvK3feVu+8rd39lr89X9vp8Za/PV/b6fGWvz1f2+nxlr89X9vp8Za/PV/b6fGWvz1f2+nxlr89X9vp8Za/PV/b6fGWvz1f2+nxlr89X9vp8Za/PV/b6fGWvz1f2+nxlr89X9vp8Za/PV/b6fGWvz1f2+nxlr89X9vp8Za/PV/b6fGWvz1f2+nxlr89X9vp8Za/PV/b6fGWvz1f2+nxlr89X9vp8Za/PV/b6fGWvz1f2+nxlr89X9vp8Za8vVvb6YmWvL1b2+mJlry8eX3lLrLwlV95SK285K29Zufsre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy1xcre32xstcXK3t9sbLXFyt7fbGy15cre325steXK3t9ubLXl4+vvCVW3pIrb6mVt5yVt6zc/ZW9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnry5W9vlzZ68uVvb5c2evLlb2+XNnrq5W9vlrZ66uVvb5a2eurx1feEitvyZW31MpbzspbVu7+yl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PXVyl5frez11cpeX63s9dXKXl+t7PWdlb2+s7LXd1b2+s7KXt95fOUtsfKWXHlLrbzlrLxl5e6v7PWdlb2+s7LXd1b2+s7KXt9Z2es7K3t9Z2Wv76zs9Z2Vvb6zstd3Vvb6zspe31nZ6zsre31nZa/vrOz1nZW9vrOy13dW9vrOyl7fWdnrOyt7fWdlr++s7PWdlb2+s7LXd1b2+s7KXt9Z2es7K3t9Z2Wv76zs9Z2Vvb6zstd3Vvb6zspe31nZ6zsre31nZa/vrOz1nZW9vrOy13dW9vrOyl7fWdnrOyt7fWdlr++s7PWdlb2+M97r+3pOLp/Ty+fs8jm/fC4un8vL5+ryuXP5XN89V5fnpS7PS12el7o8L3V5XuryvNTleanL81KX56Uuz8u5PC/n8rycy/NyLs/LuTwv5/K8nMvzci7Py7k8L+fyvPTleenL89KX56Uvz0tfnpe+PC99eV768rz05Xnpu/PSz3P5nFw+p5fP2eVzfvlcXD6Xl8/V5XPn8rnL8yKX50Uuz4tcnhe5PC9yeV7k8rzI5XmRy/Mil+dFLs+LXp4XvTwvenle9PK86OV50cvzopfnRS/Pi16eF708L3Z5XuzyvNjlebHL82KX58Uuz4tdnhe7PC92eV7s8rz45Xnxy/Pil+fFL8/L93/9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PkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkogPkohPkohPkohPkohPkofRp4qxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcpxEcZxEcZxEcZxEcZxEfZw8hTg/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/gog/goh/goh/goh/goh/gofxh56hAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf5RAf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Txk+6p0DkqcMH/XOAclTho9654DkKcNHvXNA8pTho945IHnK8FHvHJA8Zfiodw5InjJ81DsHJE8ZPuqdA5KnDB/1zgHJU4aPeueA5CnDR71zQPKU4aPeOSB5yvBR7xyQPGX4qHcOSJ4yfNQ7ByRPGT7qnQOSpwwf9c4ByVOGj3rngOQpw0e9c0DylOGj3jkgecrwUe8ckDxl+Kh3DkieMnzUOwckTxk+6p0DkqcMH/XOAclTho9654DkKcNHvXNA8pTho945IHnK8FHvHIw8FYiPEoiPEoiPEoiPkoeRpwLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQLxUQrxUQrxUQrxUQrxUfow8lQhPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPkohPsogPsogPsogPsogPsoeRp4axEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEcZxEc5xEc5xEc5xEc5xEf5w8hTh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/goh/iogPiogPiogPiogPioeBh5GhAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAfFRAflRAflRAflRAflRAflQ8jTxPioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLioxLiowriowriowriowrio+ph5GlBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfFRBfNSB+KgD8VEH4qMOxEedh5GnB+KjDsRHHYiPOhAfdSA+6kB81IH4qAPxUQfiow7ERx2IjzoQH3UgPupAfNSB+KgD8VEH4qMOxEcdiI86EB91ID7qQHzUgfioA/FRB+KjDsRHne99VEl8PVZy4m9PI1Jfc4sc/fUlz4+X6MZLbOMlvvGS2HhJDl/y9VxdPncun+u7574HM2X54zlr/+65749R2Nd/nhXx7fv88rm4fC4vn6vL587lc3333PeL8b/jue+zJvXHd0/v756zy+e+/c9Tfxwze349ZeE/njpXT/XNU9+v5v70Kbl6Sq+e+vY/DYmMrwzL59dvLU/9eLAvH/x+vS71679XM883c36/DPfTp/TqKbt6ymdP/du//W8="},{"name":"transfer_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":36,"end":37}],"from":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}],"nonce":[{"start":37,"end":38}],"to":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240]},"bytecode":"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","debug_symbols":"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6mZk1c3IqpuRVTcjq25GVt2MrLoZWXUzsupmZNXNyKqbkVU3I6tuRlbdjKy6GVl1M7LqZmTVzciqm5FVNyOrbkZW3YysuhlZdTOy6mZk1c3IqpuRVTcjq25GVt2MrLoZWXUzsupmZNXNyKqbkVU3I6tuRlbdjKy6GVl1M7LqZmTVzciqm5FVNyOrbkZW3YysuhlZdTOy6mZk1c3IqpuRVTcjq25GJkc3JDu/Ie1vrPY3dvsb2v6Gtb/h7W9E+xvZ/kb7nUv7nUv7nUv7nUv7nUv7nUv7nUv7nUv7nUv7nUv7na/2O1/td77a73y13/lqv/PVfuer/c5X+52v9jtf7Xe+2+98t9/5br/z3X7nu/3Od/ud7/Y73+13vtvvfLffubbfubbfubbfubbfubbfubbfubbfubbfubbfubbfubXfubXfubXfubXfubXfubXfubXfubXfubXfubXfubffubffubffubffubffubffubffubffubffubffebTfebTfebTfebTfebTfebTfebTfebTfebTfebTfebbfebbfebbfebbfebbfebbfebbfebbfebbfebbfebXfebXfebXfebXfebXfebXfebXfebXfebXfeTuHk3YOJ+0cTto5nLRzuPP42v6Gtb/h7W9E+xvZ/kb7nbdzOGnncNLO4aSdw0k7h5N2DiftHE7aOZy0czhp53DSzuGkncNJO4eTdg4n7RxO2jmctHM4aedw0s7hpJ3DSTuHk3YOJ+0cTto5nLRzOGnncNLO4aSdw0k7h5N2DiftHE7aOZy0czhp53DSzuGkncNJO4eTdg4n7RxO2jmctHM4aedw0s7hpJ3DSTuHk3YOJ+0cTto5nLRzOGnncNLO4aSdw0k7h5N2DiftHE7aOZy0czhp53DSzuGkncNJO4eTdg4n7RxO2jmctHM4aedw0s7hpJ3DSTuHk3YOJ+0cTto5nLRzOGnncNLO4aSdw0k7h5N2DiftHE7aOZy0czhp53DSzuGkncNJO4eTdg4n7RxO2jmctHM4aedwq53DrXYOt9o53GrncKudw612DrfaOdxq53CrncOtdg632jncaudwq53DrXYOt9o53GrncKudw612DrfaOdxq53CrncOtdg632jncaudwq53DrXYOt9o53GrncKudw612DrfaOdxq53CrncOtdg632jncaudwq53DrXYOt9o53GrncKudw612DrfaOdxq53CrncOtdg632jncaudwq53DrXYOt9o53GrncKudw612DrfaOdxq53CrncOtdg632jncaudwq53DrXYOt9o53GrncKudw612DrfaOdxq53CrncOtdg632jncaudwq53DrXYOt9o53GrncKudw612DrfaOdxq53CrncOtdg632jncaudwq53DrXYOt9o53GrncKudw612DrfaOdxq53CrncOtdg632jncaudwq53DrXYOt9o53GrncLudw+12DrfbOdxu53C7ncPtdg632zncbudwu53D7XYOt9s53G7ncLudw+12DrfbOdxu53C7ncPtdg632zncbudwu53D7XYOt9s53G7ncLudw+12DrfbOdxu53C7ncPtdg632zncbudwu53D7XYOt9s53G7ncLudw+12DrfbOdxu53C7ncPtdg632zncbudwu53D7XYOt9s53G7ncLudw+12DrfbOdxu53C7ncPtdg632zncbudwu53D7XYOt9s53G7ncLudw+12DrfbOdxu53C7ncPtdg632zncbudwu53D7XYOt9s53G7ncLudw+12DrfbOdxu53C7ncPtdg632zncbudwu53D7XYOt9s53G7ncLudw+12DrfbOdxu53C7ncPtdg632zncbudwu53D7XYOt9s53G7ncLudw+12DrfbOdxu53DazuG0ncNpO4fTdg6n7RxO2zmctnM4bedw2s7htJ3DaTuH03YOp+0cTts5nLZzOG3ncNrO4bSdw2k7h9N2DqftHE7bOZy2czht53DazuG0ncNpO4fTdg6n7RxO2zmctnM4bedw2s7htJ3DaTuH03YOp+0cTts5nLZzOG3ncNrO4bSdw2k7h9N2DqftHE7bOZy2czht53DazuG0ncNpO4fTdg6n7RxO2zmctnM4bedw2s7htJ3DaTuH03YOp+0cTts5nLZzOG3ncNrO4bSdw2k7h9N2DqftHE7bOZy2czht53DazuG0ncNpO4fTdg6n7RxO2zmctnM4bedw2s7htJ3DaTuH03YOp+0cTts5nLZzOG3ncNrO4bSdw2k7h9N2DqftHE7bOZy2czht53DazuG0ncNpO4fTdg5n7RzO2jmctXM4a+dw1s7hrJ3DWTuHs3YOZ+0czto5nLVzOGvncNbO4aydw1k7h7N2DmftHM7aOZy1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UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UyW3myq53VTJ7aZKbjdVcrupkttNldxuquR2UxW3m6q43VTF7aYqbjdVHdS7bnG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1Uxe2mKm43VXG7qYrbTVXcbqridlMVt5uquN1URe2m0oPaTXWWz7zrnuUz77pn+cy77lk+8657ls+8657lM++6Z/nMu+5ZPvOue5bPvetSu6nO8rl3XWo31Vk+965L7aY6y+fedandVGf53LsutZvqLJ9716V2U53lc++61G6qs3zuXZfaTXWWz73rUrupzvK5d11qN9VZPveuS+2mOsvn3nWp3VRn+dy7LrWb6iyfe9eldlOd5XPvutRuqrN87l2X2k11ls+961K7qc7yuXddajfVWT73rkvtpjrL5951qd1UZ/ncuy61m+osn3vXpXZTneVz77rUbqqzfO5dl9pNdZbPvetSu6nO8rl3XWo31Vk+965L7aY6y+fedandVGf53LsutZvqLJ9716V2U53lc++61G6qs3zuXZfaTXWWz73rUrupzvK5d11qN9VZPveuS+2mOsvn3nWp3VRn+dy7LrWb6iyfe9eldlOd5XPvutRuqrN87l2X2k11ls+961K7qc7yuXddajfVWT73rkvtpjrL5951qd1UZ/ncuy61m+osn3rXFW43lXC7qYTbTSXcbio5qHdd4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE200l3G4q4XZTCbebSrjdVMLtphJuN5Vwu6mE2021uN1Ui9tNtbjdVIvbTbUO6l13cbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebanG7qRa3m2pxu6kWt5tqcbupFrebaoG7qaSelI+96z4tH3vXfVo+9q4bjyunVH5XPvau+7R87F33afnYu+7T8rF33aflY++6T8rf4G6qp+Vj77pPy8fedZ+Wj73rPi2fetfd4G6qp+VT77ob3E31tHzqXXeDu6melQ/upnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rgvupnpaPveuC+6melo+964L7qZ6Wj73rsvtptrcbqrN7aba3G6qze2m2txuKuV2Uym3m0q53VTK7abSg3rXVW43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uyu2mUm43lXK7qZTbTaXcbirldlMpt5tKud1Uxu2mMm43lXG7qYzbTWUH9a5r3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mM201l3G4q43ZTGbebyrjdVMbtpjJuN5Vxu6mc203l3G4q53ZTObebyg/qXde53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2Uzm3m8q53VTO7aZybjeVc7upnNtN5dxuKud2UwW3myq43VTB7aYKbjdVHNS7bnC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mCm43VXC7qYLbTRXcbqrgdlMFt5squN1Uwe2mSm43VXK7qZLbTZXcbqo8qHfd5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS202V3G6q5HZTJbebKrndVMntpkpuN1Vyu6mS201V3G6q4nZTFbebqrjdVHVQ77rF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW3m6q43VTF7aYqbjdVcbupittNVdxuquJ2UxW1m8oOajfVWT7zrnuWz7zrnuUz77pn+cy77lk+8657ls+8657lM++6Z/nMu+5ZPveuS+2mOsvn3nWp3VRn+dy7LrWb6iyfe9eldlOd5XPvutRuqrN87l2X2k11ls+961K7qc7yuXddajfVWT73rkvtpjrL5951qd1UZ/ncuy61m+osn3vXpXZTneVz77rUbqqzfO5dl9pNdZbPvetSu6nO8rl3XWo31Vk+965L7aY6y+fedandVGf53LsutZvqLJ9716V2U53lc++61G6qs3zuXZfaTXWWz73rUrupzvK5d11qN9VZPveuS+2mOsvn3nWp3VRn+dy7LrWb6iyfe9eldlOd5XPvutRuqrN87l2X2k11ls+961K7qc7yuXddajfVWT73rkvtpjrL5951qd1UZ/ncuy61m+osn3vXpXZTneVz77rUbqqzfO5dl9pN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I3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy12cjc302MtdnI3N9NjLXZyNzfTYy1+cjc30+MtfnI3N9PjLX54eO3MVG7uIjd4mRu+TIXUbW/shcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1+chcn4/M9fnIXJ+PzPX5yFyfj8z1xchcX4zM9cXIXF+MzPXFoSN3sZG7+MhdYuQuOXKXkbU/MtcXI3N9MTLXFyNzfTEy1xcjc30xMtcXI3N9MTLXFyNzfTEy1xcjc30xMtcXI3N9MTLXFyNzfTEy1xcjc30xMtcXI3N9MTLXFyNzfTEy1xcjc30xMtcXI3N9MTLXFyNzfTEy1xftub4f32tP6j2+J29+b735vf3m9/TN79mb3/M3vxdvfi/f/N6bvxd78/dib/5e7M3fi735e7E3fy/25u/F3vy92Ju/F3vz92Jv/l78zd+Lv/l78Td/L/7m78Xf/L34m78Xf/P34m/+XvzN34u/+XuJN38v8ebvJd78vcSbv5d48/cSb/5e4s3fS7z5e4k3fy/x5u8l3/y95Ju/l3zz95Jv/l7yzd9Lvvl7yTd/L/nm7yXf/L3km7+XevP3Um/+XurN30u9+XupN38v9ebvpd78vdSbv5d68/dS7/1e8jje/J68+b315vf2m9/TN79nb37P3/xevPm9fPN7b/5e5M3fi7z5e5E3fy/y5u9F3vy9yJu/F3nz9yJv/l7kzd+LvPl7WW/+Xtabv5f15u/l+7+/OH586fj3P8yv9GyHPz55/t/19eFaX5fXay9v117er718XHv5vPbydenlv//riN93ebn28uvay1+7ave1q3Zfu2r3tat2X7tq97Wrdl+7avXaVavXrlq9dtXqtatWr121eu2q1WtXrV67avXaVavXrlq7dtXatavWrl21du2qtUtXbf2Tv8c4jq8/Fxyr/vgmIhU/Pizr17+ljvq6i43cxUfuEiN3yZG71MRd/snf7fzuu8jIXdbIXfbIXX7z2pfj27vYyF185C4xcpccuUtN3OX7vzez80D044tWR/7xXVaJ/vjwOv/d/Pxwfvdh+ap/Sa0//vBZ3qP+M/D/u+3xm4fN/BrGyvyZlYnsr4fdd3pYvdPD2p0e1u/0sPExD1vrUYaUHd8+bN7pYetGD/v9fMOnPqzc6WE/5wT1wsN+zgnqDAoeVz6Ob7ee+pwT1AsP+zH77Dr058NqfvuwH7PPvvKwH7PPPn3Y8xIfs8++8rAfs8++8rAfs8++8rAfs8++8rAfs8++8rAfk1S88rAfk1S88rD3OUGdl7jPCeq8xJ1OUHKnE5Tc6QQldzpByZ1OUHKnE5Tc6QQldzpByZ1OUHKnE5Tc6QS17nSCWnc6Qa07naDWnU5Q604nqHWnE9S60wlq3ekEte50glp3OkHtO52g9p1OUPtOJ6h9pxPUvtMJat/pBLXvdILadzpB7TudoPadTlB6pxOU3ukEpXc6QemdTlB6pxOU3ukEpXc6QemdTlB6pxOU3ukEZXc6QdmdTlB2pxOU3ekEZXc6QdmdTlB2pxOU3ekEZXc6QdmdTlB+pxOU3+kE5Xc6QfmdTlB+pxOU3+kE5Xc6QfmdTlB+pxOU3+kEFXc6QcWdTlBxpxNU3OkEFXc6QcWdTlBxpxNU3OkEFXc6QcWdTlB5pxNU3ukE9Tnm6lce9k4nqM8xV7/ysHc6QX2OufqVh73TCepzzNWvPOydTlCfY65+5WHvdIL6HHP1Kw97pxPU55irX3nYO52g6k4nqBs5yc+HvdMJ6k5OcrmTk1zu5CSXOznJ5U5Ocjn0Tg97oxOU3MlJLndyksudnORyJye53MlJLndyksudnORyJye53MlJLndyksudnORyJye53MlJLndyksudnORyJye53MlJLndyksudnORyJye53MlJLndyksudnORyJye53MlJLndyksudnORyJye53MlJLndyksudnORyJye53MlJLh8kc5Zjf1152bcP+zlbzwsP+zkNatXxuPJZ0rcP+zkN6oWH/ZwG9cLDfs4f8Z4/7Acpf1942I/5I54cWo92/B///5d+HD8f92N22tce93P22p3rcWXd9Xc/5W/+5Zwb76Pq82/l17enrg/SBF/wL+dz/hh5wb+czznVXfAv53NOgRf8y/mcU+Mf/Mv58bAfZP594WE/Jyt/4WE/J7B44WFvcYh6PKze6WFvcch5POznHFo05ethc337sJ9zCHnhYT/nUPHCw35OFPX8YT/I/PvCw37OCeqFh/2cE9QLD/s5J6gXHlbv9LCfc4J64WHvdIL6IPPvCw97pxPUB5l/nz/sB5l/X3jYO52gPsj8+8LD3ukE9UHm3xce9k4nqA8y/77wsHc6QX2Q+feFh73TCeqDzL8vPOydTlAfZP594WHvdIL6IPPvCw97pxPUB5l/X3jYO52gPsj8+8LD3ugEtT7I/PvCw97oBLWOz9lnxe3nleXbh/2cffaFh/2cffaFh/2cffaFh/2cffaFh/2cffb5w36QH/bvHta+fdjP2WdfeNgPAqSfP+wHAdLPH1bv9LCfc4Ja6ydZat+ejT/ID/vCw34QIP30YT/IIvrCw37OPvvCw37OPvvCw37OPvvCw37OPrvqa5/d8u0fBD7IIvrCw36SYubpw36SYubpw36SYubpw36SYubZw36QRfSFh/2gE9Tzh/2gE9Tzh/2gE9Tzh9U7PeydTlAfZBF94WHvdIL6IIvoCw97I0nf0htJ+pZ+0gnq6cN+0gnq6cN+0gnq6cPqnR72k05QTx/2RprjdSfN8bqT5njdSXO87qQ5Xp+jOX7lYe90gvogxfELD6t3etg7naA+SCn8wsPe6QT1QcrfFx72TieoD/Ibv/CwdzpBfZDf+IWHvdMJ6oP8xi887J1OUB/kN37hYe90gvogv/ELD3unE9QH+Y1feNg7naA+yG/8wsPqnR72ToeK78Wwj28dTx5z/STCzuPJ14dtfV2+Lr389/LT33d5ufby69rL72svr9de3q69vF97+bj28n9q1W75+u817/Xt5evSy9dx7eXl2suvay+/r728Xnt5u/byfu3l49rLX7tq69JVu4/j2svLtZdf115+X3t5vfbyf26v/WVwd8V3l/drLx/XXj6vvXxdenk5rr28XHv5de3l97WX12svf+2qlWtXrVy7auXaVSvXrtp17apd167ade2qXdeu2nXtql3Xrtp17apd167ade2qXdeu2n3tqt3Xrtp97ard167afe2q3deu2n3tqt3Xrtp97ard165avTSF3bqvvbxee3m79vJ+7eXj2svntZe/9O9Oth3XXl6uvfy1eY5dm+fYtXmO2bWX92svH9dePq+9/LUprF+bwvq1Kaxfu2r92lXr165av3bV+rWr1q9dtX7tqvVrz5hx7Z8M49o/Gca1fzKMa/9kGNf+yTCu/ZNhXPsnw7j2T4Zx7Z8M49pVm9eu2rx21ea1qzavXbV57arNa1dtXrtq89pVm9eu2rx21da1q7auXbV17aqta1dtXbtq69pVW9eu2rp21da1q7YuXbV6HNdeXq69/Lr28vvay38Plu3H11x+3iKOr2/FW9/69lcqP+fU5WeF/vWtf/Kfx3lyr3/y35l59i1961v21rfe+jf//d+vL3/8GXcf+vMt69e39lvf0re+ZW99y9/6Vrzzre//OlLsK3cWP+zre3LE1xf13S9+++/Elz/eted3dfpb34q3vpVvfat63/r3f///AA=="},{"name":"_initialize","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"new_admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"name","type":{"kind":"struct","path":"compressed_string::compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"private"},{"name":"symbol","type":{"kind":"struct","path":"compressed_string::compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"private"},{"name":"decimals","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"lastTimeStamp","type":{"kind":"struct","path":"safe_math::safe_u120::SafeU120","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":120}}]},"visibility":"private"}],"param_witnesses":{"decimals":[{"start":37,"end":38}],"inputs":[{"start":0,"end":34}],"lastTimeStamp":[{"start":38,"end":39}],"name":[{"start":35,"end":36}],"new_admin":[{"start":34,"end":35}],"symbol":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241]},"bytecode":"","debug_symbols":""}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"// docs:start:add-trait\ntrait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field { fn add(self, other: Field) -> Field { self + other } }\n\nimpl Add for u8 { fn add(self, other: u8) -> u8 { self + other } }\nimpl Add for u16 { fn add(self, other: u16) -> u16 { self + other } }\nimpl Add for u32 { fn add(self, other: u32) -> u32 { self + other } }\nimpl Add for u64 { fn add(self, other: u64) -> u64 { self + other } }\n\nimpl Add for i8 { fn add(self, other: i8) -> i8 { self + other } }\nimpl Add for i16 { fn add(self, other: i16) -> i16 { self + other } }\nimpl Add for i32 { fn add(self, other: i32) -> i32 { self + other } }\nimpl Add for i64 { fn add(self, other: i64) -> i64 { self + other } }\n\n// docs:start:sub-trait\ntrait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field { fn sub(self, other: Field) -> Field { self - other } }\n\nimpl Sub for u8 { fn sub(self, other: u8) -> u8 { self - other } }\nimpl Sub for u16 { fn sub(self, other: u16) -> u16 { self - other } }\nimpl Sub for u32 { fn sub(self, other: u32) -> u32 { self - other } }\nimpl Sub for u64 { fn sub(self, other: u64) -> u64 { self - other } }\n\nimpl Sub for i8 { fn sub(self, other: i8) -> i8 { self - other } }\nimpl Sub for i16 { fn sub(self, other: i16) -> i16 { self - other } }\nimpl Sub for i32 { fn sub(self, other: i32) -> i32 { self - other } }\nimpl Sub for i64 { fn sub(self, other: i64) -> i64 { self - other } }\n\n// docs:start:mul-trait\ntrait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field { fn mul(self, other: Field) -> Field { self * other } }\n\nimpl Mul for u8 { fn mul(self, other: u8) -> u8 { self * other } }\nimpl Mul for u16 { fn mul(self, other: u16) -> u16 { self * other } }\nimpl Mul for u32 { fn mul(self, other: u32) -> u32 { self * other } }\nimpl Mul for u64 { fn mul(self, other: u64) -> u64 { self * other } }\n\nimpl Mul for i8 { fn mul(self, other: i8) -> i8 { self * other } }\nimpl Mul for i16 { fn mul(self, other: i16) -> i16 { self * other } }\nimpl Mul for i32 { fn mul(self, other: i32) -> i32 { self * other } }\nimpl Mul for i64 { fn mul(self, other: i64) -> i64 { self * other } }\n\n// docs:start:div-trait\ntrait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field { fn div(self, other: Field) -> Field { self / other } }\n\nimpl Div for u8 { fn div(self, other: u8) -> u8 { self / other } }\nimpl Div for u16 { fn div(self, other: u16) -> u16 { self / other } }\nimpl Div for u32 { fn div(self, other: u32) -> u32 { self / other } }\nimpl Div for u64 { fn div(self, other: u64) -> u64 { self / other } }\n\nimpl Div for i8 { fn div(self, other: i8) -> i8 { self / other } }\nimpl Div for i16 { fn div(self, other: i16) -> i16 { self / other } }\nimpl Div for i32 { fn div(self, other: i32) -> i32 { self / other } }\nimpl Div for i64 { fn div(self, other: i64) -> i64 { self / other } }\n\n// docs:start:rem-trait\ntrait Rem{\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u8 { fn rem(self, other: u8) -> u8 { self % other } }\nimpl Rem for u16 { fn rem(self, other: u16) -> u16 { self % other } }\nimpl Rem for u32 { fn rem(self, other: u32) -> u32 { self % other } }\nimpl Rem for u64 { fn rem(self, other: u64) -> u64 { self % other } }\n\nimpl Rem for i8 { fn rem(self, other: i8) -> i8 { self % other } }\nimpl Rem for i16 { fn rem(self, other: i16) -> i16 { self % other } }\nimpl Rem for i32 { fn rem(self, other: i32) -> i32 { self % other } }\nimpl Rem for i64 { fn rem(self, other: i64) -> i64 { self % other } }\n\n// docs:start:bitor-trait\ntrait BitOr {\n    fn bitor(self, other: Self) -> Self;\n}\n// docs:end:bitor-trait\n\nimpl BitOr for bool { fn bitor(self, other: bool) -> bool { self | other } }\n\nimpl BitOr for u8 { fn bitor(self, other: u8) -> u8 { self | other } }\nimpl BitOr for u16 { fn bitor(self, other: u16) -> u16 { self | other } }\nimpl BitOr for u32 { fn bitor(self, other: u32) -> u32 { self | other } }\nimpl BitOr for u64 { fn bitor(self, other: u64) -> u64 { self | other } }\n\nimpl BitOr for i8 { fn bitor(self, other: i8) -> i8 { self | other } }\nimpl BitOr for i16 { fn bitor(self, other: i16) -> i16 { self | other } }\nimpl BitOr for i32 { fn bitor(self, other: i32) -> i32 { self | other } }\nimpl BitOr for i64 { fn bitor(self, other: i64) -> i64 { self | other } }\n\n// docs:start:bitand-trait\ntrait BitAnd {\n    fn bitand(self, other: Self) -> Self;\n}\n// docs:end:bitand-trait\n\nimpl BitAnd for bool { fn bitand(self, other: bool) -> bool { self & other } }\n\nimpl BitAnd for u8 { fn bitand(self, other: u8) -> u8 { self & other } }\nimpl BitAnd for u16 { fn bitand(self, other: u16) -> u16 { self & other } }\nimpl BitAnd for u32 { fn bitand(self, other: u32) -> u32 { self & other } }\nimpl BitAnd for u64 { fn bitand(self, other: u64) -> u64 { self & other } }\n\nimpl BitAnd for i8 { fn bitand(self, other: i8) -> i8 { self & other } }\nimpl BitAnd for i16 { fn bitand(self, other: i16) -> i16 { self & other } }\nimpl BitAnd for i32 { fn bitand(self, other: i32) -> i32 { self & other } }\nimpl BitAnd for i64 { fn bitand(self, other: i64) -> i64 { self & other } }\n\n// docs:start:bitxor-trait\ntrait BitXor {\n    fn bitxor(self, other: Self) -> Self;\n}\n// docs:end:bitxor-trait\n\nimpl BitXor for bool { fn bitxor(self, other: bool) -> bool { self ^ other } }\n\nimpl BitXor for u8 { fn bitxor(self, other: u8) -> u8 { self ^ other } }\nimpl BitXor for u16 { fn bitxor(self, other: u16) -> u16 { self ^ other } }\nimpl BitXor for u32 { fn bitxor(self, other: u32) -> u32 { self ^ other } }\nimpl BitXor for u64 { fn bitxor(self, other: u64) -> u64 { self ^ other } }\n\nimpl BitXor for i8 { fn bitxor(self, other: i8) -> i8 { self ^ other } }\nimpl BitXor for i16 { fn bitxor(self, other: i16) -> i16 { self ^ other } }\nimpl BitXor for i32 { fn bitxor(self, other: i32) -> i32 { self ^ other } }\nimpl BitXor for i64 { fn bitxor(self, other: i64) -> i64 { self ^ other } }\n\n// docs:start:shl-trait\ntrait Shl {\n    fn shl(self, other: Self) -> Self;\n}\n// docs:end:shl-trait\n\nimpl Shl for u8 { fn shl(self, other: u8) -> u8 { self << other } }\nimpl Shl for u16 { fn shl(self, other: u16) -> u16 { self << other } }\nimpl Shl for u32 { fn shl(self, other: u32) -> u32 { self << other } }\nimpl Shl for u64 { fn shl(self, other: u64) -> u64 { self << other } }\n\n// Bit shifting is not currently supported for signed integer types\n// impl Shl for i8 { fn shl(self, other: i8) -> i8 { self << other } }\n// impl Shl for i16 { fn shl(self, other: i16) -> i16 { self << other } }\n// impl Shl for i32 { fn shl(self, other: i32) -> i32 { self << other } }\n// impl Shl for i64 { fn shl(self, other: i64) -> i64 { self << other } }\n\n// docs:start:shr-trait\ntrait Shr {\n    fn shr(self, other: Self) -> Self;\n}\n// docs:end:shr-trait\n\nimpl Shr for u8 { fn shr(self, other: u8) -> u8 { self >> other } }\nimpl Shr for u16 { fn shr(self, other: u16) -> u16 { self >> other } }\nimpl Shr for u32 { fn shr(self, other: u32) -> u32 { self >> other } }\nimpl Shr for u64 { fn shr(self, other: u64) -> u64 { self >> other } }\n\n// Bit shifting is not currently supported for signed integer types\n// impl Shr for i8 { fn shr(self, other: i8) -> i8 { self >> other } }\n// impl Shr for i16 { fn shr(self, other: i16) -> i16 { self >> other } }\n// impl Shr for i32 { fn shr(self, other: i32) -> i32 { self >> other } }\n// impl Shr for i64 { fn shr(self, other: i64) -> i64 { self >> other } }\n","path":"std/ops.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"42":{"source":"use dep::aztec::{\n    protocol_types::{\n        address::AztecAddress,\n        constants::MAX_READ_REQUESTS_PER_CALL\n    },\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    context::PrivateContext,\n    state_vars::set::Set,\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    nullifier_key::get_nullifier_secret_key,\n    get_public_key::get_public_key,\n};\nuse dep::safe_math::SafeU120;\nuse dep::std::option::Option;\n\ntrait OwnedNote {\n    fn new(amount: SafeU120, owner: AztecAddress) -> Self;\n    fn get_amount(self) -> SafeU120;\n    fn get_owner(self) -> AztecAddress;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\n\nstruct TokenNote {\n    // the amount of tokens in the note\n    amount: SafeU120,\n    // the provider of secrets for the nullifier. The owner (recipient) to ensure that the note \n    // can be privately spent. When nullifier secret and encryption private key is same \n    // we can simply use the owner for this one.\n    owner: AztecAddress,\n    // randomness of the note to hide contents.\n    randomness: Field,\n    // the note header (contract_address, nonce, storage_slot)\n    // included in the note such that it becomes part of encrypted logs for later use.\n    header: NoteHeader,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN> for TokenNote {\n    fn serialize_content(self) -> [Field; TOKEN_NOTE_LEN] {\n        [self.amount.value as Field, self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; TOKEN_NOTE_LEN]) -> Self {\n        Self {\n            amount: SafeU120::new(serialized_note[0]),\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n      // We only bother inserting the note if non-empty to save funds on gas.\n      if !self.amount.is_zero() {\n          let encryption_pub_key = get_public_key(self.owner);\n          emit_encrypted_log(\n              context,\n              (*context).this_address(),\n              slot,\n              encryption_pub_key,\n              self.serialize_content(),\n          );\n      }\n  }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: SafeU120, owner: AztecAddress) -> Self {\n        Self {\n            amount,\n            owner,\n            randomness: rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> SafeU120 {\n        self.amount\n    }\n\n    fn get_owner(self) -> AztecAddress {\n        self.owner\n    }\n   \n}\n","path":"/home/blockchain_oracle/Desktop/Coding Stuffs/aztecNoir/src/types/token_note.nr"},"43":{"source":"use dep::std::option::Option;\nuse dep::safe_math::SafeU120;\nuse dep::aztec::{\n    context::{PrivateContext, PublicContext, Context},\n    hash::pedersen_hash,\n    protocol_types::{\n        address::AztecAddress,\n        constants::MAX_READ_REQUESTS_PER_CALL,\n    },\n    state_vars::{\n        set::Set,\n        map::Map\n    },\n    note::{\n        note_getter::view_notes,\n        note_getter_options::{NoteGetterOptions, SortOrder},\n        note_viewer_options::NoteViewerOptions,\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    }\n};\nuse crate::types::token_note::{TokenNote, OwnedNote};\n\nstruct BalancesMap<T> {\n    map: Map<AztecAddress, Set<T>>\n}\n\nimpl<T> BalancesMap<T> {\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            map: Map::new(context, storage_slot, |context, slot| Set::new(context, slot))\n        }\n    }\n\n    unconstrained pub fn balance_of<T_SERIALIZED_LEN>(self: Self, owner: AztecAddress) -> SafeU120 where T: NoteInterface<T_SERIALIZED_LEN> + OwnedNote {\n        self.balance_of_with_offset(owner, 0)\n    }\n\n  unconstrained pub fn balance_of_with_offset<T_SERIALIZED_LEN>(self: Self, owner: AztecAddress, offset: u32) -> SafeU120 where T: NoteInterface<T_SERIALIZED_LEN> + OwnedNote {\n      // Same as SafeU120::new(0), but fewer constraints because no check. \n      let mut balance = SafeU120::min();\n      // docs:start:view_notes\n      let options = NoteViewerOptions::new().set_offset(offset);\n      let opt_notes = self.map.at(owner).view_notes(options);\n      // docs:end:view_notes\n      let len = opt_notes.len();\n      for i in 0..len {\n          if opt_notes[i].is_some() {\n              balance = balance.add(opt_notes[i].unwrap_unchecked().get_amount());\n          }\n      }\n      if (opt_notes[len - 1].is_some()) {\n          balance = balance.add(self.balance_of_with_offset(owner, offset + opt_notes.len() as u32));\n      }\n\n      balance\n  }\n\n    pub fn add<T_SERIALIZED_LEN>(self: Self, owner: AztecAddress, addend: SafeU120) where T: NoteInterface<T_SERIALIZED_LEN> + OwnedNote {\n        let mut addend_note = T::new(addend, owner);\n\n        // docs:start:insert\n        self.map.at(owner).insert(&mut addend_note, true);\n        // docs:end:insert\n    }\n\n    pub fn sub<T_SERIALIZED_LEN>(self: Self, owner: AztecAddress, subtrahend: SafeU120) where T: NoteInterface<T_SERIALIZED_LEN> + OwnedNote{\n        // docs:start:get_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend);\n        let maybe_notes = self.map.at(owner).get_notes(options);\n        // docs:end:get_notes\n\n        let mut minuend: SafeU120 = SafeU120::min();\n        for i in 0..maybe_notes.len() {\n            if maybe_notes[i].is_some() {\n                let note = maybe_notes[i].unwrap_unchecked();\n\n                // Removes the note from the owner's set of notes.\n                // This will call the the `compute_nullifer` function of the `token_note`\n                // which require knowledge of the secret key (currently the users encryption key).\n                // The contract logic must ensure that the spending key is used as well.\n                // docs:start:remove\n                self.map.at(owner).remove(note);\n                // docs:end:remove\n\n                minuend = minuend.add(note.get_amount());\n            }\n        }\n\n        // This is to provide a nicer error msg,\n        // without it minuend-subtrahend would still catch it, but more generic error then.\n        // without the == true, it includes 'minuend.ge(subtrahend)' as part of the error.\n        assert(minuend.ge(subtrahend) == true, \"Balance too low\");\n\n        self.add(owner, minuend.sub(subtrahend));\n    }\n\n}\n\npub fn filter_notes_min_sum<T, T_SERIALIZED_LEN>(\n    notes: [Option<T>; MAX_READ_REQUESTS_PER_CALL],\n    min_sum: SafeU120\n) -> [Option<T>; MAX_READ_REQUESTS_PER_CALL] where T: NoteInterface<T_SERIALIZED_LEN> + OwnedNote {\n    let mut selected = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let mut sum = SafeU120::min();\n    for i in 0..notes.len() {\n        if notes[i].is_some() & sum.lt(min_sum) {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum = sum.add(note.get_amount());\n        }\n    }\n    selected\n}","path":"/home/blockchain_oracle/Desktop/Coding Stuffs/aztecNoir/src/types/balances_map.nr"},"44":{"source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    hash::{compute_secret_hash, pedersen_hash},\n    context::PrivateContext,\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n\n// Transparent note represents a note that is created in the clear (public execution),\n// but can only be spent by those that know the preimage of the \"secret_hash\"\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n    // the secret is just here for ease of use and won't be (de)serialized\n    secret: Field,\n    // header is just here to satisfy the NoteInterface\n    header: NoteHeader,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN> for TransparentNote {\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            secret: 0,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, _context: &mut PrivateContext) -> Field {\n        self.compute_nullifier_without_context()\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let siloed_note_hash = compute_note_hash_for_consumption(self);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([self.secret, siloed_note_hash],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        assert(false, \"TransparentNote does not support broadcast\");\n    }\n}\n\nimpl TransparentNote {\n\n    // CONSTRUCTORS\n\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote {\n            amount: amount,\n            secret_hash: secret_hash,\n            secret: 0,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // new oracle call primitive\n    // get me the secret corresponding to this hash\n    pub fn new_from_secret(amount: Field, secret: Field) -> Self {\n        TransparentNote {\n            amount: amount,\n            secret_hash: compute_secret_hash(secret),\n            secret: secret,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n\n    pub fn knows_secret(self, secret: Field) {\n        let hash = compute_secret_hash(secret);\n        assert(self.secret_hash == hash);\n    }\n}\n// docs:end:token_types_all\n","path":"/home/blockchain_oracle/Desktop/Coding Stuffs/aztecNoir/src/types/transparent_note.nr"},"45":{"source":"mod types;\n\ncontract Token {\n    // Libs\n    use dep::std::option::Option;\n\n    use dep::safe_math::SafeU120;\n    use dep::compressed_string::FieldCompressedString;\n    use dep::aztec::log::emit_unencrypted_log;\n\n    use dep::aztec::{\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        context::{PrivateContext, PublicContext, Context},\n        hash::{compute_secret_hash},\n        state_vars::{map::Map, public_state::PublicState, stable_public_state::StablePublicState,  set::Set},\n        protocol_types::{\n            abis::function_selector::FunctionSelector,\n            address::AztecAddress\n        }\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit,\n            assert_current_call_valid_authwit_public,\n        },\n    };\n    // docs:end:import_authwit\n\n    use crate::types::{\n        transparent_note::TransparentNote,\n        token_note::{TokenNote, TOKEN_NOTE_LEN},\n        balances_map::BalancesMap\n    };\n    // docs:end::imports\n\n    // docs:start:storage_struct\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicState<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicState<bool>>, \n        balances: BalancesMap<TokenNote>,\n        total_supply: PublicState<SafeU120>, \n        pending_shields: Set<TransparentNote>, \n        public_balances: Map<AztecAddress, PublicState<SafeU120>>,\n        symbol: StablePublicState<FieldCompressedString>,\n        name: StablePublicState<FieldCompressedString>,\n        decimals: StablePublicState<u8>,\n        my_array:Map<Field, PublicState<AztecAddress>>,\n        // my_arrays:PublicState<[AztecAddress; 100]>\n        lastTimeStamp: PublicState<SafeU120>\n    }\n    #[aztec(private)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8, lastTimeStamp: u64) {\n        let selector = FunctionSelector::from_signature(\"_initialize((Field),(Field),(Field),u8,(Field))\");\n        let name_s = FieldCompressedString::from_string(name);\n        let symbol_s = FieldCompressedString::from_string(symbol);\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [\n            admin.to_field(), name_s.serialize()[0], symbol_s.serialize()[0], decimals as Field, lastTimeStamp as Field\n        ]\n        );\n    }\n\n    #[aztec(public)]\n //buy ticket=>> minting a token to enter the lottery\n //amount is fixed ticket price \n //inputs is user age verifcation proff\n    fn buy_Tickets(\n        current_year: u64,\n        current_month: u64,\n        current_day: u64,\n        birth_year: u64,\n        birth_month: u64,\n        birth_day: u64\n    ) {\n        let verify= is_over_18(\n            current_year,\n            current_month,\n            current_day,\n            birth_year,\n            birth_month,\n            birth_day\n        );\n        assert(!verify, \"you are not over 18\");\n        //WHERE 10000 is the ticket price\n        let amount = SafeU120::new(10000);\n\n        //cheek if user has minted before// you only get one ticket\n        if ((storage.public_balances.at(context.msg_sender()).read().value) > 10000) {\n            assert(false, \"you already have a ticket\");\n        }\n        let new_balance = storage.public_balances.at(context.msg_sender()).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(context.msg_sender()).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n\n    #[aztec(public)]\n    //blocktimestamp will be passed with ethers.js in frontend\nfn enter_lottery(blocktimeStamp: u64, somehash: u64) {\n        if (storage.public_balances.at(context.msg_sender()).read().value < 10000) {\n            assert(false, \"you need to buy a ticket to enter the lottery\");\n        }\n        //enter the lottery\n        let mut valueIndex= 0;\n        storage.my_array.at(valueIndex).write(context.msg_sender());\n        valueIndex.add(1);\n        //seding money to our lottery contract\n        let selector = FunctionSelector::from_signature(\"transfer_public((Field),(Field),(Field),(Field)\");\n        let from = context.msg_sender();\n        let to = context.this_address();\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [from.to_field(), to.to_field(), 10000 as Field, 1 as Field]\n        );\n        //implementing the lottery logic\n        //block.timeStamp not implemted, lastblockTimeStamp not implemented \n        //interval =30;\n        if ((blocktimeStamp - ((storage.lastTimeStamp.read().value) as u64)) > 30\n            & storage.public_balances.at(from).read().value > 10000) {\n            //somehash not yet implemented can  wrap my head around it\n            let winnerIndex= somehash % (valueIndex as u64);\n            let winner = storage.my_array.at((winnerIndex as Field)).read();\n            let selector = FunctionSelector::from_signature(\"transfer_public((Field),(Field),(Field),(Field)\");\n            let from = context.this_address();\n            let to = winner;\n            context.call_public_function(\n                context.this_address(),\n                selector,\n                [\n                from.to_field(), to.to_field(), storage.public_balances.at(from).read().value as Field, 1 as Field\n            ]\n            );\n            emit_unencrypted_log(&mut context, winnerIndex);\n            emit_unencrypted_log(&mut context, winner);\n        }\n    }\n\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = SafeU120::new(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n\n    #[aztec(public)]\n   internal  fn _initialize(\n        new_admin: AztecAddress,\n        name: FieldCompressedString,\n        symbol: FieldCompressedString,\n        decimals: u8,\n        lastTimeStamp: SafeU120\n    ) {\n        assert(!new_admin.is_zero(), \"invalid admin\");\n        storage.admin.write(new_admin);\n        storage.minters.at(new_admin).write(true);\n        storage.name.initialize(name);\n        storage.symbol.initialize(symbol);\n        storage.decimals.initialize(decimals);\n        storage.lastTimeStamp.write(lastTimeStamp);\n    }\n\n    unconstrained fn is_over_18(\n        current_year: u64,\n        current_month: u64,\n        current_day: u64,\n        birth_year: u64,\n        birth_month: u64,\n        birth_day: u64\n    ) -> pub bool {\n        // Compute the difference in years\n        let mut years_since_birth = current_year.sub(birth_year);\n\n        // Check if the current month is earlier than the birth month\n        // or if the current month is the same as the birth month but the current day is earlier\n        if (current_month < birth_month) {\n            // If so, subtract one from the calculated years because the person hasn't had their birthday yet this year\n            years_since_birth  -=   1;\n        }\n\n        // Return true if age is greater than   18\n        years_since_birth > 18\n    }\n\n    unconstrained fn balance_of_public(owner: AztecAddress) -> pub u120 {\n        storage.public_balances.at(owner).read().value\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; TOKEN_NOTE_LEN]\n    ) -> pub [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        if (storage_slot == storage.pending_shields.get_storage_slot()) {\n            note_utils::compute_note_hash_and_nullifier(\n                TransparentNote::deserialize_content,\n                note_header,\n                serialized_note\n            )\n        } else {\n            note_utils::compute_note_hash_and_nullifier(TokenNote::deserialize_content, note_header, serialized_note)\n        }\n    }\n}\n\n","path":"/home/blockchain_oracle/Desktop/Coding Stuffs/aztecNoir/src/main.nr"},"48":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n    },\n    hash::{\n        hash_args,\n        pedersen_hash,\n    },\n};\nuse dep::aztec::context::{\n    PrivateContext,\n    PublicContext,\n    Context,\n};\n\nglobal IS_VALID_SELECTOR = 0xe86ab4ff;\nglobal IS_VALID_PUBLIC_SELECTOR = 0xf3661153;\n\n// @todo #2676 Should use different generator than the payload to limit probability of collisions.\n\n// docs:start:assert_valid_authwit\n// Assert that `on_behalf_of` have authorized `message_hash` with a valid authentication witness\npub fn assert_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    message_hash: Field\n) {\n    let is_valid_selector = FunctionSelector::from_field(IS_VALID_SELECTOR);\n    let result = context.call_private_function(on_behalf_of, is_valid_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_valid_authwit_public\n// Assert that `on_behalf_of` have authorized `message_hash` in a public context\npub fn assert_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let is_valid_public_selector = FunctionSelector::from_field(IS_VALID_PUBLIC_SELECTOR);\n    let result = context.call_public_function(on_behalf_of, is_valid_public_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit_public\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit_public(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_authwit_message_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_authwit_message_hash<N>(\n    caller: AztecAddress,\n    target: AztecAddress,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args(args);\n    pedersen_hash(\n        [caller.to_field(), target.to_field(), selector.to_field(), args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n}\n// docs:end:compute_authwit_message_hash\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/authwit/src/auth.nr"},"52":{"source":"use dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    address::{AztecAddress, EthAddress},\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n    traits::{Hash, Serialize},\n    header::Header,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl Serialize<2> for PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n    coinbase: EthAddress,\n    fee_recipient: AztecAddress,\n}\n// docs:end:public-global-variables\n\nimpl Serialize<6> for PublicGlobalVariables {\n    fn serialize(self) -> [Field; 6] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    historical_header: Header,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    historical_header: Header,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/abi.nr"},"54":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"},"58":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"59":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter\n    )\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"60":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"},"70":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::RETURN_VALUES_LENGTH,\n};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"},"71":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::NUM_FIELDS_PER_SHA256,\n    grumpkin_point::GrumpkinPoint,\n};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: AztecAddress, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"},"83":{"source":"use crate::{\n    context::PrivateContext,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n    },\n    hash::pedersen_hash,\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/note/utils.nr"},"88":{"source":"pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/utils.nr"},"89":{"source":"mod private;\nmod public;\nmod avm;\n\nuse public::PublicContext;\nuse private::PrivateContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/context.nr"},"92":{"source":"use crate::{\n    abi::PublicContextInputs,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        public_call::call_public_function_internal,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        global_variables::GlobalVariables,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            0,\n        )\n    }\n\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/context/public.nr"},"94":{"source":"use crate::{\n    abi::PrivateContextInputs,\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        header::get_header_at,\n        nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        private_call_stack_item::PrivateCallStackItem,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contract_class::ContractClassId,\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    meta_hwm: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            meta_hwm: 0,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            historical_header: inputs.historical_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n\n            nullifier_key: Option::none(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            meta_hwm: self.meta_hwm,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(key_pair.account == account, \"Cannot query nullifier key for more than one account per call\");\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field)\n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    )\n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/context/private.nr"},"99":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/log.nr"},"102":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{\n    hash::pedersen_hash,\n    traits::{ToField}\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"},"104":{"source":"use crate::context::{Context};\nuse crate::oracle::{\n    storage::{storage_read, storage_write},\n};\nuse crate::history::public_value_inclusion::prove_public_value_inclusion;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\nstruct StablePublicState<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for StablePublicState<T> {}\n\nimpl<T> StablePublicState<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            context,\n            storage_slot,\n        }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state wrties only supported in public functions\");\n        // TODO: Must throw if the storage slot is not empty -> cannot allow overwriting\n        // This is currently impractical, as public functions are never marked `is_contract_deployment`\n        // in the `call_context`, only private functions will have this flag set.\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i,\n                (*private_context).this_address(),\n                (*private_context),\n            )\n        }\n        T::deserialize(fields)\n    }\n\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/state_vars/stable_public_state.nr"},"105":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Set<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Set<T> {}\n\nimpl<Note> Set<Note> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/state_vars/set.nr"},"107":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"},"113":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"116":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\nglobal AZTEC_ADDRESS_SERIALIZED_LEN = 1;\nglobal ETH_ADDRESS_SERIALIZED_LEN = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/type_serialization.nr"},"119":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/field.nr"},"121":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    } \n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"125":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"131":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::AztecAddress,\n    constants::{\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n        PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::pedersen_hash,\n    header::Header,\n    traits::{\n        Hash,\n        Serialize,\n        Deserialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"},"138":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs,\n        };\n        call_stack_item\n    }\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"},"142":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"143":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"169":{"source":"use crate::{\n    constants::{\n        CONTRACT_STORAGE_READ_LENGTH,\n        GENERATOR_INDEX__PUBLIC_DATA_READ,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Empty,\n        Serialize,\n    },\n};\n\nstruct StorageRead {\n    storage_slot: Field,\n    current_value: Field,\n}\n\nimpl Eq for StorageRead {\n    fn eq(self, other: Self) -> bool {\n        (self.storage_slot == other.storage_slot) & (self.current_value == other.current_value)\n    }\n}\n\nimpl Empty for StorageRead {   \n    fn empty() -> Self {\n        Self {\n            storage_slot: 0,\n            current_value: 0,\n        }\n    }\n}\n\nimpl Hash for StorageRead {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n}\n\nimpl Serialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.current_value]\n    }\n}\n\nimpl Deserialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn deserialize(serialized: [Field; CONTRACT_STORAGE_READ_LENGTH]) -> Self {\n        Self {\n            storage_slot: serialized[0],\n            current_value: serialized[1],\n        }\n    }\n}\n\nimpl StorageRead {\n    pub fn is_empty(self) -> bool {\n        self.storage_slot == 0\n    }\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/storage_read.nr"},"173":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"174":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"179":{"source":"use dep::std::cmp::Eq;\nuse dep::aztec::protocol_types::traits::{Deserialize, Serialize};\n\nstruct SafeU120 {\n    value: u120,\n}\n\nimpl Eq for SafeU120 {\n    fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n}\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<SAFE_U120_SERIALIZED_LEN> for SafeU120 {\n    fn serialize(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n        [value.value as Field]\n    }\n}\n\nimpl Deserialize<SAFE_U120_SERIALIZED_LEN> for SafeU120 {\n    // This is safe when reading from storage IF only correct safeu120 was written to storage\n    fn deserialize(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n        SafeU120 { value: fields[0] as u120 }\n    }\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n","path":"/home/blockchain_oracle/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/safe-math/src/safe_u120.nr"}}}